#!/usr/bin/env python3

import sys
import getopt
import codecs
import re

import ruamel.yaml
import commonmark
import bs4
from bs4 import BeautifulSoup as soup


blurb="""

            Hey, welcome to the source.

            I only know enough about modern web design to get myself in
            trouble, and I even shy away from the accepted normal ways
            of doing it because I get a weird meditative joy from
            fiddling around with CSS directly.

            So this is all hand coded HTML and CSS, rendered from
            Markdown source using tools I wrote.  There's a link to the
            tools at the bottom of the page.

            I had fun making it.  Hopefully it's at least entertaining
            to look at.

            -erik

"""


def log(txt):
    print(txt, file=sys.stderr)

def usage():
    print ()
    print ("Usage:")
    print ('  %s --styesheet=xxx.css' % sys.argv[0])
    sys.exit(2)

def deindent(txt):
    indent = min([ len(x) - len(x.lstrip()) for x in txt.split("\n") if len(x) > 0])
    return("\n".join(map(lambda x: x[indent:], txt.split("\n"))))

def main(argv):

    stylesheet    = ""
    external_data = {}
    body          = ""

    collapsible_count = 0

    try:
        opts, args = getopt.gnu_getopt(argv, '', ['stylesheet=', 'data='])
    except getopt.GetoptError:
        usage()
    for opt, arg in opts:
        if opt == '--stylesheet':
            try:
                fh = open(arg)
                stylesheet = "".join(fh.readlines())
            except (TypeError, FileNotFoundError):
                print("Error.  Enter a valid path to the stylesheet")
                usage()

        elif opt == '--data':
            try:
                fh = open(arg)
                yaml = ruamel.yaml.YAML(typ='safe')
                external_data = yaml.load(fh)
            except (TypeError, FileNotFoundError) as err:
                print("Error! Enter a path to a valid YAML file.  %s" % err)
                usage()
            except ruamel.yaml.parser.ParserError as err:
                print("YAML parse error.  %s" % err)
                usage()

    # work through all the markdown files specified
    for a in args:
        filename = a
        input_file = codecs.open(filename, mode="r", encoding="utf-8")
        text = input_file.read()
        html = commonmark.commonmark(text)
        body += html

    html_template = """
<html>
    <head>
        <!--
%s
        -->
        <title></title>
        <style type="text/css">
%s
        </style>
    </head>
    <body>
    </body>
</html>
""" % (blurb, stylesheet)

    pagesoup = soup(html_template, 'html.parser')

    bodysoup = soup(body, 'html.parser')

    # set up hierarchy based on headers
    for heading in bodysoup.find_all('h3'):
        hclass = "subheading"
        div = bodysoup.new_tag("div", **{'class': hclass})
        for element in heading.find_next_siblings():
            if element.name == "h3":
                break
            element.extract()
            div.append(element)
        heading.insert_after(div)
        heading.extract()
        div.insert(0, heading)

    for heading in bodysoup.find_all('h2'):
        hname = heading.string.lower().replace(" ", "_")
        div = bodysoup.new_tag("div", id=hname)
        for element in heading.find_next_siblings():
            if element.name == "h2":
                break
            element.extract()
            div.append(element)
        heading.insert_after(div)
        heading.extract()
        div.insert(0, heading)

    # make skill scroll containers
    for item in bodysoup.select("#technical_skills, #leadership_skills"):
        container = bodysoup.new_tag('div', **{'class': 'skill_container'})
        item.append(container)

    # make collapsible sections
    for item in bodysoup.select("#technical_skills > ul, #leadership_skills > ul"):

        parent = item.parent
        container = parent.find(**{'class': 'skill_container'})

        skill = bodysoup.new_tag('div', **{'class': 'skill'})

        p = item.find_previous('p')
        container.append(skill)
        p.extract()
        skill.append(p)

        item.extract()
        skill.append(item)

        skill.insert(0, bodysoup.new_tag(
            "input",
            id=f"collapse{collapsible_count}",
            **{'type': 'checkbox', 'class': 'collapsible'}))

        p.name = 'label'
        p['title'] =  "Click for more details"
        p['class'] =  'collapsible-toggle'
        p["for"]   = f"collapse{collapsible_count}"

        outer = bodysoup.new_tag("div", **{'class': "collapsible-content"})
        inner = bodysoup.new_tag("div", **{'class': "collapsible-content-inner"})

        item.wrap(inner)
        inner.wrap(outer)

        collapsible_count += 1

    # fix misplaced sections after work history
    for item in bodysoup.select('#personal_interests, #a_note_for_llms'):
        item.extract()
        bodysoup.append(item)

    # create the footer section and put everything after the hr in it
    hr = bodysoup.find_all('hr')[-1]
    if hr:
        div = bodysoup.new_tag("div", id="footer")
        tags = hr.find_all_next('p')
        hr.extract()
        div.append(hr)
        for tag in tags:
            tag.extract()
            div.append(tag)
        bodysoup.append(div)

    # set percent graphs for dd with x/10
    for i in range(11):
        val = re.compile(f"^{i}/10")
        dds = bodysoup.find_all("dd", string=val)
        for dd in dds:

            dd['class'] = "bar_%s_of_10" % i


    # insert hidden data
    if external_data:

        # insert hidden data (address, phone)
        for heading in external_data.get("hidden_fields_by_heading", {}).keys():
            d = external_data["hidden_fields_by_heading"][heading]
            for k in d.keys():
                log("Filling in: %s/%s" % (heading, k))
                try:
                    p=bodysoup.find(id=heading).find("p", string=re.compile(k))
                    p.string = f"{k} {d[k]}"

                    # put that tag at the beginning of its parent
                    parent = p.parent
                    p.extract()
                    parent.insert(1,p)

                except AttributeError:
                    p = bodysoup.new_tag("p")
                    p.string = f"{k} {d[k]}"
                    bodysoup.find(id=heading).append(p)
                    # put that tag at the beginning of its parent
                    parent = p.parent
                    p.extract()
                    parent.insert(1,p)

    # set a page title
    title = bodysoup.find("h1").string
    pagesoup.find("title").string = title

    # Make a header with the title and contact info
    firstheader = bodysoup.find('h1')
    if firstheader:
        firstheader["id"] = "name"
        contact = bodysoup.find('div', id='contact')
        if contact:
            header = bodysoup.new_tag("div", id="header")
            firstheader.extract()
            contact.extract()
            header.append(firstheader)
            header.append(contact)
            bodysoup.insert(0,header)

    # now break the experience dates off from the role
    for item in bodysoup.select("#experience h3"):
        t = str(item.text)
        item.string = ''
        for i in t.split(':'):
            tag = bodysoup.new_tag('span')
            tag.append(i)
            item.append(tag)

    # we're going to cheat and pop the SVG in directly rather than rely on BS4 to process it,
    # at least until I can sort out why BS4 is choking whenever I use it to parse SVG snippets
    if external_data:
        for lookfor in external_data.get("replace_content_global", []).keys():
            t = bodysoup.find(string=re.compile(lookfor))
            if t:
                t.parent["class"] = f"element_{lookfor.lower()}"
                replace = external_data["replace_content_global"][lookfor]
                newtext = re.sub(lookfor, replace, str(t))
                r_soup = soup(f"{newtext}", 'html.parser')
                t.replace_with(r_soup)

    pagesoup.body.append(bodysoup)

    out = pagesoup.prettify()

    print(out)

if __name__ == '__main__':
    main(sys.argv[1:])


